import numpy as np
import matplotlib.pyplot as plt
import scipy.integrate as spi
 
def ode1(y, t):
    dydx = t * np.exp(3*t) - 2*y
    return dydx
def exact_sol1(t):
    return (1/5) * t * np.exp(3*t) - (1/25) * np.exp(3*t) + (1/25) * np.exp(-2*t)

def ode2(y, t): 
    dydx= 1 + (t - y)**2
    return

def exact_sol2(t):
    return t + 1/(1-t)
y0 = 0
tspan = (0,1)
t1 = np.linspace(0,1,1000)

ode1_sol = spi.odeint(ode1 ,y0,t1 )
ode1_solivp = spi.solve_ivp(ode1, tspan, [y0], t_eval= t1, method= 'RK45')

y= ode1_solivp.y[0]
t= ode1_solivp.t
ext= exact_sol1(t1)

error_odeivp = np.abs(ode1_sol.flatten()- ext)
error_solveivp = np.abs( y - ext)
plt.subplot(3,1,1)
plt.plot(t1,ode1_sol.flatten(),color='r',label='ODE1 by odeint')
plt.plot(t,y,color= 'b', label= 'Ode1 solve_ivp')
plt.plot(t1,ext,color='g',label = 'exact soln')
plt.legend()


plt.subplot(3,1,2)
plt.plot(t1,error_odeivp ,color = 'b', label='Error by odeivp')
plt.legend()
plt.subplot(3,1,3)
plt.plot(t1,error_solveivp,color = 'r', label='Error by solve_ivp' )
plt.legend()
plt.show()
